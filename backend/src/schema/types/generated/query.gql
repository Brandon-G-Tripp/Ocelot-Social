type Query {
  Notification(
    id: ID
    read: Boolean
    createdAt: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_NotificationOrdering]
    filter: _NotificationFilter
  ): [Notification]
  Location(
    id: ID
    name: String
    nameEN: String
    nameDE: String
    nameFR: String
    nameNL: String
    nameIT: String
    nameES: String
    namePT: String
    namePL: String
    type: String
    lat: Float
    lng: Float
    _id: String
    first: Int
    offset: Int
    orderBy: [_LocationOrdering]
    filter: _LocationFilter
  ): [Location]
  Report(
    id: ID
    description: String
    type: String
    createdAt: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_ReportOrdering]
    filter: _ReportFilter
  ): [Report]
  Reward(
    id: ID
    rewarderId: ID
    createdAt: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_RewardOrdering]
    filter: _RewardFilter
  ): [Reward]
  Organization(
    id: ID
    name: String
    slug: String
    description: String
    descriptionExcerpt: String
    deleted: Boolean
    disabled: Boolean
    _id: String
    first: Int
    offset: Int
    orderBy: [_OrganizationOrdering]
    filter: _OrganizationFilter
  ): [Organization]
  SharedInboxEndpoint(
    id: ID
    uri: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_SharedInboxEndpointOrdering]
    filter: _SharedInboxEndpointFilter
  ): [SharedInboxEndpoint]
  SocialMedia(
    id: ID
    url: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_SocialMediaOrdering]
    filter: _SocialMediaFilter
  ): [SocialMedia]
  Badge(
    id: ID
    key: String
    type: BadgeType
    status: BadgeStatus
    icon: String
    createdAt: String
    updatedAt: String
    _id: String
    first: Int
    offset: Int
    orderBy: [_BadgeOrdering]
    filter: _BadgeFilter
  ): [Badge]
  Category(
    id: ID
    name: String
    slug: String
    icon: String
    createdAt: String
    updatedAt: String
    postCount: Int
    _id: String
    first: Int
    offset: Int
    orderBy: [_CategoryOrdering]
    filter: _CategoryFilter
  ): [Category]
  Comment(
    id: ID
    activityId: String
    postId: ID
    content: String
    contentExcerpt: String
    createdAt: String
    updatedAt: String
    deleted: Boolean
    disabled: Boolean
    _id: String
    first: Int
    offset: Int
    orderBy: [_CommentOrdering]
    filter: _CommentFilter
  ): [Comment]
  Post(
    id: ID
    activityId: String
    objectId: String
    title: String
    slug: String
    content: String
    contentExcerpt: String
    image: String
    imageUpload: Upload
    visibility: Visibility
    deleted: Boolean
    disabled: Boolean
    createdAt: String
    updatedAt: String
    commentsCount: Int
    shoutedCount: Int
    shoutedByCurrentUser: Boolean
    _id: String
    first: Int
    offset: Int
    orderBy: [_PostOrdering]
    filter: _PostFilter
  ): [Post]
  Tag(
    id: ID
    name: String
    taggedCount: Int
    taggedCountUnique: Int
    deleted: Boolean
    disabled: Boolean
    _id: String
    first: Int
    offset: Int
    orderBy: [_TagOrdering]
    filter: _TagFilter
  ): [Tag]
  User(
    id: ID
    actorId: String
    name: String
    email: String
    slug: String
    password: String
    avatar: String
    coverImg: String
    avatarUpload: Upload
    deleted: Boolean
    disabled: Boolean
    role: UserGroup
    publicKey: String
    privateKey: String
    wasInvited: Boolean
    wasSeeded: Boolean
    locationName: String
    about: String
    createdAt: String
    updatedAt: String
    friendsCount: Int
    followingCount: Int
    followedByCount: Int
    followedByCurrentUser: Boolean
    contributionsCount: Int
    commentsCount: Int
    shoutedCount: Int
    badgesCount: Int
    _id: String
    first: Int
    offset: Int
    orderBy: [_UserOrdering]
    filter: _UserFilter
  ): [User]
}
