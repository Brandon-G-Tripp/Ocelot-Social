type User {
  id: ID!
  actorId: String
  name: String
  email: String!
  slug: String!
  avatar: String
  coverImg: String
  deleted: Boolean
  disabled: Boolean
  disabledBy: User @relation(name: "DISABLED", direction: "IN")
  role: UserGroup!
  publicKey: String
  invitedBy: User @relation(name: "INVITED", direction: "IN")
  invited: [User] @relation(name: "INVITED", direction: "OUT")

  location: Location @cypher(statement: "MATCH (this)-[:IS_IN]->(l:Location) RETURN l")
  locationName: String
  about: String
  socialMedia: [SocialMedia]! @relation(name: "OWNED", direction: "OUT")

  #createdAt: DateTime
  #updatedAt: DateTime
  createdAt: String
  updatedAt: String

  notifications(read: Boolean): [Notification]! @relation(name: "NOTIFIED", direction: "IN")

  friends: [User]! @relation(name: "FRIENDS", direction: "BOTH")
  friendsCount: Int! @cypher(statement: "MATCH (this)<-[:FRIENDS]->(r:User) RETURN COUNT(DISTINCT r)")

  following: [User]! @relation(name: "FOLLOWS", direction: "OUT")
  followingCount: Int! @cypher(statement: "MATCH (this)-[:FOLLOWS]->(r:User) RETURN COUNT(DISTINCT r)")

  followedBy: [User]! @relation(name: "FOLLOWS", direction: "IN")
  followedByCount: Int! @cypher(statement: "MATCH (this)<-[:FOLLOWS]-(r:User) RETURN COUNT(DISTINCT r)")

  # Is the currently logged in user following that user?
  followedByCurrentUser: Boolean! @cypher(
    statement: """
      MATCH (this)<-[:FOLLOWS]-(u:User {id: $cypherParams.currentUserId})
      RETURN COUNT(u) >= 1
    """
  )

  #contributions: [WrittenPost]!
  #contributions2(first: Int = 10, offset: Int = 0): [WrittenPost2]!
  #  @cypher(
  #    statement: "MATCH (this)-[w:WROTE]->(p:Post) RETURN p as Post, w.timestamp as timestamp"
  #  )
  contributions: [Post]! @relation(name: "WROTE", direction: "OUT")
  contributionsCount: Int! @cypher(
    statement: """
      MATCH (this)-[:WROTE]->(r:Post)
      WHERE NOT r.deleted = true AND NOT r.disabled = true
      RETURN COUNT(r)
    """
  )

  comments: [Comment]! @relation(name: "WROTE", direction: "OUT")
  commentsCount: Int! @cypher(statement: "MATCH (this)-[:WROTE]->(r:Comment) WHERE NOT r.deleted = true AND NOT r.disabled = true RETURN COUNT(r)")
  commentedCount: Int! @cypher(statement: "MATCH (this)-[:WROTE]->(r:Comment)-[:COMMENTS]->(p:Post) WHERE NOT r.deleted = true AND NOT r.disabled = true AND NOT p.deleted = true AND NOT p.disabled = true RETURN COUNT(DISTINCT(p))")

  shouted: [Post]! @relation(name: "SHOUTED", direction: "OUT")
  shoutedCount: Int! @cypher(statement: "MATCH (this)-[:SHOUTED]->(r:Post) WHERE NOT r.deleted = true AND NOT r.disabled = true RETURN COUNT(DISTINCT r)")

  organizationsCreated: [Organization] @relation(name: "CREATED_ORGA", direction: "OUT")
  organizationsOwned: [Organization] @relation(name: "OWNING_ORGA", direction: "OUT")

  blacklisted: [User]! @relation(name: "BLACKLISTED", direction: "OUT")

  categories: [Category]! @relation(name: "CATEGORIZED", direction: "OUT")

  badges: [Badge]! @relation(name: "REWARDED", direction: "IN")
  badgesCount: Int! @cypher(statement: "MATCH (this)<-[:REWARDED]-(r:Badge) RETURN COUNT(r)")

  emotions: [EMOTED]
}


input _UserFilter {
  AND: [_UserFilter!]
  OR: [_UserFilter!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  friends: _UserFilter
  friends_not: _UserFilter
  friends_in: [_UserFilter!]
  friends_not_in: [_UserFilter!]
  friends_some: _UserFilter
  friends_none: _UserFilter
  friends_single: _UserFilter
  friends_every: _UserFilter
  following: _UserFilter
  following_not: _UserFilter
  following_in: [_UserFilter!]
  following_not_in: [_UserFilter!]
  following_some: _UserFilter
  following_none: _UserFilter
  following_single: _UserFilter
  following_every: _UserFilter
  followedBy: _UserFilter
  followedBy_not: _UserFilter
  followedBy_in: [_UserFilter!]
  followedBy_not_in: [_UserFilter!]
  followedBy_some: _UserFilter
  followedBy_none: _UserFilter
  followedBy_single: _UserFilter
  followedBy_every: _UserFilter
}

type Query {
  User(
    id: ID
    email: String
    actorId: String
    name: String
    slug: String
    avatar: String
    coverImg: String
    role: UserGroup
    locationName: String
    about: String
    createdAt: String
    updatedAt: String
    friendsCount: Int
    followingCount: Int
    followedByCount: Int
    followedByCurrentUser: Boolean
    contributionsCount: Int
    commentsCount: Int
    commentedCount: Int
    shoutedCount: Int
    badgesCount: Int
    first: Int
    offset: Int
    orderBy: [_UserOrdering]
    filter: _UserFilter
  ): [User]
}

type Mutation {
  UpdateUser (
    id: ID!
    name: String
    email: String
    slug: String
    avatar: String
    coverImg: String
    avatarUpload: Upload
    locationName: String
    about: String
  ): User

  DeleteUser(id: ID!, resource: [Deletable]): User
}
